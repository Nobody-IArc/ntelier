generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User 모델 (사용자)
model User {
  id String @id @default(uuid())
  // 로그인 시 사용할 정보
  email String @unique
  password String

  // 활동 시 사용할 정보
  nickname String
  tag Int
  // nickname + tag 조합은 unique 속성을 가져야 함
  @@unique([nickname, tag])

  createdAt DateTime @default(now())

  // 사용자의 블로그와 작성 댓글 목록
  blog Blog
  comments Comment[]
}

// Blog 모델 (블로그)
model Blog {
  id String @id @default(uuid())

  // User 테이블과 매핑
  userId String @unique
  // prisma 에서 references == Foreign Key
  user User @relation(fields: [userId], references: [id])

  title String

  // 블로그 설명은 선택 항
  description String?
  theme String? // 추후 테마 기능 확장 대비

  createdAt DateTime @default(now())

  // 블로그에 작성된 Post와 Series
  posts Post[]
  series Series[]
}

// Post 모델 (게시글)
model Post {
  id String @id @default(uuid())
  title String
  content String

  // uuid 대신 읽기 쉽게 slug 사용
  slug String @unique

  // 게시글 공개 여부
  isPublished Boolean @default(true)

  // 게시글이 작성된 블로그와 매핑
  blogId String
  blog Blog @relation(fields: [blogId], references: [id])

  // 게시글이 속할 시리즈와 매핑 (선택적 항목)
  seriesId String?
  series Series? @relation(fields: [seriesId], references: [id])
  orderInSeries Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 게시글에 작성된 댓글 배열
  comments Comment[]
}

model Series {
  id String @id @default(uuid())
  title String

  // 시리즈 설명은 사용자의 선택 항목으로 둠
  description String?
  slug String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  blodId String
  blog Blog @relation(fields: [blodId], references: [id])

  // 시리즈에 속하는 게시글 배열
  posts Post[]
}

// Comment 모델 (댓글)
model Comment {
  id String @id @default(uuid())
  content String
  isPrivate Boolean @default(false)

  // 댓글이 작성된 게시글과 매핑
  postId String
  post Post @relation(fields: [postId], references: [id])

  // 댓글 작성자 식별을 위해 매핑
  userId String
  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt @updatedAt

  // Soft Delete 기능 사용 목적으로 작성 - '삭제된 댓글 입니다. 등 표시'
  deletedAt DateTime?
}
